#!/usr/bin/env python3
"""
Build script for E-Bike Compare static site

This script builds the static website and copies it to the docs directory
for GitHub Pages deployment.
"""

import os
import shutil
import glob
from pathlib import Path

def main():
    # Define paths
    base_dir = Path(__file__).parent.parent
    src_web_dir = base_dir / "src" / "web"
    docs_dir = base_dir / "docs"
    
    print("🏗️  Building E-Bike Compare static site...")
    
    # Clean docs directory
    if docs_dir.exists():
        print("🧹 Cleaning docs directory...")
        shutil.rmtree(docs_dir)
    
    docs_dir.mkdir(exist_ok=True)
    
    # Copy web source files to docs
    print("📁 Copying website files...")
    
    # Copy HTML files
    for html_file in src_web_dir.glob("*.html"):
        shutil.copy2(html_file, docs_dir)
        print(f"   ✓ {html_file.name}")
    
    # Copy CSS directory
    css_src = src_web_dir / "css"
    css_dest = docs_dir / "css"
    if css_src.exists():
        shutil.copytree(css_src, css_dest)
        print(f"   ✓ css/ directory")
    
    # Copy JS directory
    js_src = src_web_dir / "js"
    js_dest = docs_dir / "js"
    if js_src.exists():
        shutil.copytree(js_src, js_dest)
        print(f"   ✓ js/ directory")
    
    # Copy data directory (CSV files)
    data_src = src_web_dir / "data"
    data_dest = docs_dir / "data"
    if data_src.exists():
        shutil.copytree(data_src, data_dest)
        csv_count = len(list(data_dest.glob("*.csv")))
        print(f"   ✓ data/ directory ({csv_count} CSV files)")
    else:
        # Create empty data directory
        data_dest.mkdir(exist_ok=True)
        print(f"   ⚠️  data/ directory created (empty)")
    
    # Create CNAME file for custom domain (if needed)
    # cname_file = docs_dir / "CNAME"
    # cname_file.write_text("your-domain.com\n")
    
    # Create .nojekyll file to prevent Jekyll processing
    nojekyll_file = docs_dir / ".nojekyll"
    nojekyll_file.touch()
    print(f"   ✓ .nojekyll file created")
    
    # Create basic README for docs folder
    readme_file = docs_dir / "README.md"
    readme_content = """# E-Bike Compare - GitHub Pages Site

This directory contains the built static website for GitHub Pages deployment.

**🚨 Do not edit files in this directory directly!**

Files in this directory are automatically generated by the build process.
Edit source files in `src/web/` instead.

## How it works

1. Source files are in `src/web/`
2. Build script (`scripts/build.py`) copies them here
3. GitHub Pages serves from this `docs/` directory
4. Crawlers update CSV data files automatically via GitHub Actions

## Local Development

For local development, work directly with files in `src/web/` and use a local web server:

```bash
cd src/web
python -m http.server 8000
```

Then visit http://localhost:8000
"""
    readme_file.write_text(readme_content)
    print(f"   ✓ README.md created")
    
    print("\n✅ Build completed successfully!")
    print(f"📦 Built site is in: {docs_dir}")
    print(f"🌐 Total files: {len(list(docs_dir.rglob('*')))}")
    
    # Print file structure
    print("\n📋 File structure:")
    for item in sorted(docs_dir.rglob('*')):
        if item.is_file():
            rel_path = item.relative_to(docs_dir)
            size = item.stat().st_size
            if size > 1024:
                size_str = f"{size // 1024}KB"
            else:
                size_str = f"{size}B"
            print(f"   {rel_path} ({size_str})")

if __name__ == "__main__":
    main() 